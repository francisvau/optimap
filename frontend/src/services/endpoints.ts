export const endpoints = {
    auth: {
        me: '/api/auth/me',
        register: '/api/auth/register',
        login: '/api/auth/login',
        logout: '/api/auth/logout',
        forgotPassword: '/api/auth/forgot-password',
        resetPassword: '/api/auth/reset-password',
        verifyRequest: '/api/auth/verify',
        verify: '/api/auth/verify/{token}',
        block: '/api/auth/block/{userId}',
        unblock: '/api/auth/unblock/{userId}',
    },
    user: {
        all: '/api/users',
        delete: '/api/user/{userId}',
        getOrganizations: '/api/users/{userId}/organization',
    },
    organization: {
        all: '/api/organizations',
        create: '/api/organizations',
        get: '/api/organizations/{orgId}',
        delete: '/api/organizations/{orgId}',
        edit: '/api/organizations/{orgId}',
        users: '/api/organizations/{orgId}/users',
        deleteUser: '/api/organizations/{orgId}/users/{userId}',
        getUser: '/api/organizations/{orgId}/users/{userId}',
        invite: '/api/organizations/{orgId}/invite',
        pendingInvites: '/api/organizations/{orgId}/pending-invites',
        join: '/api/organizations/join',
        userRole: '/api/organizations/{orgId}/users/{userId}',
        blacklist: '/api/organizations/{orgId}/blacklist/{userId}',
        stats: '/api/organizations/{orgId}/stats',
        models: {
            all: '/api/organizations/{orgId}/models',
            create: '/api/organizations/{orgId}/models',
            edit: '/api/organizations/{orgId}/models/{modelId}',
            delete: '/api/organizations/{orgId}/models/{modelId}',
            getById: '/api/organizations/{orgId}/models/{modelId}',
        },
        role: {
            edit: '/api/organizations/{orgId}/roles/{roleId}',
            create: '/api/organizations/{orgId}/roles',
            delete: '/api/organizations/{orgId}/roles/{roleId}',
            all: '/api/organizations/{orgId}/roles',
        },
    },
    blueprints: {
        getAll: '/api/mappings/blueprints',
        getById: '/api/mappings/blueprints/{blueprintId}',
        getByUserId: '/api/mappings/blueprints/user/{userId}',
        getByOrgId: '/api/mappings/blueprints/organization/{orgId}',
        create: '/api/mappings/blueprints',
        update: '/api/mappings/blueprints/{blueprintId}',
        delete: '/api/mappings/blueprints/{blueprintId}',
        outputDefinitions: {
            update: '/api/mappings/blueprints/{blueprintId}/output',
        },
        inputDefinitions: {
            create: '/api/mappings/blueprints/{blueprintId}/input',
            delete: '/api/mappings/blueprints/{blueprintId}/input/{definitionId}',
            update: '/api/mappings/blueprints/{blueprintId}/input/{definitionId}',
            sourceMappings: {
                create: '/api/mappings/blueprints/{blueprintId}/input/{definitionId}/mappings',
                update: '/api/mappings/blueprints/{blueprintId}/input/{definitionId}/mappings/{mappingId}',
                delete: '/api/mappings/blueprints/{blueprintId}/input/{definitionId}/mappings/{mappingId}',
                generate:
                    '/api/mappings/blueprints/{blueprintId}/input/{definitionId}/mappings/{mappingId}/generate',
            },
            versions: {
                get: '/api/mappings/blueprints/{blueprintId}/input/{definitionId}/versions',
                create: '/api/mappings/blueprints/{blueprintId}/input/{definitionId}/new-version',
                select: '/api/mappings/blueprints/{blueprintId}/input/{definitionId}/select',
            },
        },
        mappings: {},
    },
    jobs: {
        create: '/api/mappings/jobs',
        update: '/api/mappings/jobs/{jobId}',
        delete: '/api/mappings/jobs/{jobId}',
        getById: '/api/mappings/jobs/{jobId}',
        getByUserId: '/api/mappings/jobs/user/{userId}',
        getByOrgId: '/api/mappings/jobs/organization/{orgId}',
        startExecution: '/api/mappings/jobs/{jobId}/execute/{sourceMappingId}',
        dynamicExection: '/api/mappings/jobs/dynamic/{uuid}/{sourceMappingId}',
    },
    schema: {
        extraction: '/api/mappings/schema/schema-extraction',
    },
    metrics: {
        system: '/api/metrics/system',
    },
    logs: {
        user: '/api/logs/user/{userId}',
        organization: '/api/logs/organization/{orgId}',
        level: '/api/logs/level/{level}',
        type: '/api/logs/type/{type}',
        all: '/api/logs/',
    },
    upload: '/api/upload',
    notifications: {
        preferences: '/api/notifications/preferences',
    },
};
